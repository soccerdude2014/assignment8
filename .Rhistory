install.packages("stringr")
install.packages("stringr")
home_towns <- c("Kent")
source('C:/Users/Jesus Moreno/Desktop/info498f/L1-R-Skills/lab-assignment.R')
source('C:/Users/Jesus Moreno/Desktop/info498f/L1-R-Skills/lab-assignment.R')
source('C:/Users/Jesus Moreno/Desktop/info498f/L1-R-Skills/lab-assignment.R')
better_vector <- c(nums, one_two)
length(better_vector)
length(name)
paste(table_mates[3], "is from ", home_towns[3])
paste(table_mates[1], "is from ", home_towns[1])
paste(table_mates[2], "is from ", home_towns[2])
paste(table_mates, "is from ", home_towns)
paste(table_mates, "is from ", home_towns)
2*50/25+100-5
table_mates <- c("Jesus", "Luca", "John")
home_towns <- c("Kent", "Tacoma", "Oakland")
paste(table_mates, "is from ", home_towns)
```{r, echo=FALSE}
name <- "INFO-498F"
url <- paste0("https://api.github.com/users/", name, "?access_token=89e9d2854757b1b862bdfb90debd2a14579c9dc1")
data <- fromJSON(url)
library(jsonlite)
data <- fromJSON(url)
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
df$hover <- paste(df$name, "Population", df$pop/1e6, " million") # what does this do?
df$q <- with(df, cut(pop, quantile(pop))) # what does this do????
levels(df$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile") # what does this do?
df$q <- as.ordered(df$q) # what does this do?
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(df,
lon = lon,
lat = lat,
text = hover, # how does this work?
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
color = q, # what does this do?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = '2014 US city populations<br>(Click legend to toggle)', geo = g)
View(df)
library(plotly)
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
View(df)
df$hover <- paste(df$name, "Population", df$pop/1e6, " million") # what does this do?
View(df)
View(df)
df$q <- with(df, cut(pop, quantile(pop))) # what does this do????
View(df)
levels(df$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile") # what does this do?
View(df)
View(df)
df$q <- as.ordered(df$q) # what does this do?
View(df)
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
library(jsonlite)
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
View(data)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
library(plotly)
library(dplyr)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(data,
lon = lon,
lat = lat,
text = hover, # how does this work?
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
color = q, # what does this do?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = 'shootings', geo = g)
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(data,
lon = lon,
lat = lat,
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
color = shots_fired # what does this do?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = 'shootings', geo = g)
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(data,
lon = lon,
lat = lat,
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = 'shootings', geo = g)
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(data,
lon = lng,
lat = lat,
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = 'shootings', geo = g)
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(data,
lon = lng,
lat = lat,
marker = list(shots_fired), # what else can you adjust?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = 'shootings', geo = g)
install.packages("shiny")
getwd()
setwd("C:/Users/Jesus Moreno/Desktop/info498f/assignment8")
data <- data.frame(iris)
View(data)
data <- data.frame(iris)
View(data)
library(plotly)
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = Sepal.Length, mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = Sepal.Length / 2, mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = Sepal.Length / 5, mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = Sepal.Length / 10, mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = (Sepal.Length / 10), mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = (Sepal.Length / 1000), mode = "markers")
plot_ly(data = iris, x = Sepal.Length, y = Petal.Length, size = (Petal.Length / 1000), mode = "markers")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if(eval(parse(text = flower)) != 'all') {
runApp()
runApp()
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
getwd()
rsconnect::deployApp('C:/Users/Jesus Moreno/Desktop/info498f/assignment8')
rsconnect::deployApp('C:/Users/Jesus Moreno/Desktop/info498f/assignment8')
rsconnect::deployApp('C:/Users/Jesus Moreno/Desktop/info498f/assignment8')
